#!/usr/bin/env python

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

import sqlite3
import sys
import os.path
import binascii
import string
from subprocess import Popen, PIPE

def chunks(l, n):
	""" Yield successive n-sized chunks from l.
	"""
	for i in xrange(0, len(l), n):
		yield l[i:i+n]

def db_to_der(dbfile):
	certs = {}

	sql = "SELECT host, cipher, cert FROM crawldata WHERE cert <> '' ORDER BY rank ASC LIMIT 50"
	db = sqlite3.connect(dbfile)

	try:
		for host, algorithm, cert in db.execute(sql):
			print >> sys.stderr, "Converting {}".format(host)
			proc = Popen(
				['openssl', 'x509', '-inform', 'PEM', '-outform', 'DER'],
				stdin=PIPE, stdout=PIPE)

			der, _ = proc.communicate(cert)

			if proc.returncode != 0:
				print >> sys.stderr, "Certificate for host {} failed to parse".format(host)
				continue

			certs[host] = der
	finally:
		db.close()

	return certs

def hostvar(host):
	remove_punctuation_map = dict((ord(char), ord('_')) for char in string.punctuation)
	return "_{}_data".format(host.translate(remove_punctuation_map))

def print_data(certs):
	for host, der in certs.items():
		der_hex = []
		for line in chunks(binascii.hexlify(der), 20):
			der_hex.append('0x' + ', 0x'.join(chunks(line, 2)))

		der_hex = ",\n\t".join(der_hex)

		print """const uint8_t {}[{}] = {{
	{}
}};
""".format(hostvar(host), len(der), der_hex)

def print_index(certs):
	index = []

	for host in certs.keys():
		index.append("""	{{
		.host = "{0}",
		.length = sizeof({1}),
		.data = {1}
	}}""".format(host, hostvar(host)))

	print ",\n".join(index)

def print_file(certs):
	print """
/* WARNING: This file is generated by {} */

#include "asinine/tests/certs.h"

const size_t x509_certs_num = {};
""".format(
	os.path.basename(sys.argv[0]),
	len(certs))

	print_data(certs)
	print "const test_cert_t x509_certs[] = {"
	print_index(certs)
	print "};\n"

if len(sys.argv) < 2:
	sys.exit("Please specify sqlite3 database to dump from")

dbfile = sys.argv[1]
certs = db_to_der(dbfile)
print_file(certs)





